import {IConnection} from "../Data/IConnection";
import {IRequisite} from "../Data/IRequisite";
import {TLabelPos} from "../Enums/TLabelPos";
import {TControlType} from "../Enums/TControlType";
import {IAction} from "./IAction";
import {IAnchors} from "./IAnchors";
/**
 * Объект IControl представляет собой элемент управления, располагающийся на форме.
 */
export interface IControl {
    /**
     * Свойство возвращает действие, с которым связан элемент управления.
     */
    readonly Action: IAction;
    /**
     * Объект IAnchors предоставляет доступ к свойствам, отвечающим за привязку элементов управления формы к границам контейнера.
     */
    readonly Anchors: IAnchors;
    /**
     * Свойство возвращает тип элемента управления.
     */
    readonly ControlType: TControlType;
    /**
     * Свойство предоставляет доступ к тексту всплывающей подсказки недоступного элемента управления.
     */
    DisabledHint: string;
    /**
     * Свойство возвращает форму, на которой располагается элемент управления.
     */
    Enabled: boolean;
    /**
     * Свойство возвращает форму, на которой располагается элемент управления.
     */
    readonly Form: string;
    /**
     * Свойство предоставляет доступ к высоте элемента управления в пикселях.
     */
    Height: number;
    /**
     * Свойство предоставляет доступ к тексту всплывающей подсказки.
     */
    Hint: string;
    /**
     * Свойство определяет расположение метки относительно элемента управления.
     */
    LabelPosition: TLabelPos;
    /**
     * Свойство предоставляет доступ к расстоянию между элементом управления и его меткой в пикселях.
     */
    LabelSpacing: number;
    /**
     * Свойство предоставляет доступ к видимости метки элемента управления.
     */
    LabelVisible: boolean;
    /**
     * Свойство предоставляет доступ к горизонтальной координате левой границы элемента управления относительно родительского элемента в пикселях.
     */
    Left: string;
    /**
     * Свойство возвращает имя элемента управления.
     */
    readonly Name: string;
    /**
     * Свойство возвращает элемент управления, на котором расположен данный элемент.
     */
    readonly Parent: IControl;
    /**
     * Свойство предоставляет доступ к признаку только для чтения:
     * True, если элемент управления доступен только для чтения, False, если элемент управления доступен для записи.
     */
    readonly ReadOnly: boolean;
    /**
     * Свойство возвращает реквизит, связанный с элементом управления.
     */
    readonly Requisite: IRequisite;
    /**
     * Свойство возвращает индекс элемента управления при переходе по нажатию клавиши TAB.
     */
    readonly TabOrder: number;
    /**
     * Свойство возвращает признак возможности перехода на элемент управления с помощью клавиши TAB:
     * True, если элемент управления получает фокус ввода при очередном нажатии на клавишу TAB в соответствии со своим индексом, иначе False.
     */
    readonly TabStop: boolean;
    /**
     * Свойство предоставляет доступ к тексту, отображаемому в элементе управления.
     */
    Text: string;
    /**
     * Свойство возвращает заголовок элемента управления.
     */
    Title: string;
    /**
     * Свойство предоставляет доступ к вертикальной координате верхней границы элемента управления относительно родительского элемента в пикселях.
     */
    Top: number;
    /**
     * войство предоставляет доступ к видимости элемента управления.
     */
    Visible: boolean;
    /**
     * Свойство предоставляет доступ к ширине элемента управления в пикселях.
     */
    Width: number;
    /**
     * Метод выполняет проверку орфографии текста элемента управления с помощью модуля расширения по умолчанию.
     *
     * @param connection текущее соединение с базой данных.
     */
    CheckSpelling(connection: IConnection): any;
}