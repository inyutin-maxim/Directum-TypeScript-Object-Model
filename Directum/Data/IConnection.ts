import {IPrivilege} from "./IPrivilege";
import {TUserType} from "../Enums/TUserType";
import {ISystemInfo} from "../AuxiliaryObjects/ISystemInfo";
/**
 * Объект IConnection предназначен для установки соединения с базой данных.
 */
export interface IConnection {
    /**
     * Свойство предоставляет доступ к признаку активности соединения: True, если соединение активно, False в противном случае.
     */
    Active: boolean;
    /**
     * Имя базы данных, с которой устанавливается соединение.
     */
    readonly DatabaseName: string;
    /**
     * Свойство возвращает IP-адрес клиентской рабочей станции.
     */
    readonly HostAddress: string;
    /**
     * Свойство возвращает доменное имя клиентской рабочей станции.
     */
    readonly HostName: string;
    /**
     * Возвращает логин учетной записи SQL-сервера, под которой выполняется соединение.
     */
    readonly LoginName: string;
    /**
     * Признак использования Windows-аутентификации для соединения с базой данных.
     */
    readonly OSAuthentification: boolean;
    /**
     * Имя SQL-сервера, с базой данных которого устанавливается соединение.
     */
    readonly ServerName: string;
    /**
     * Возвращает идентификатор процесса соединения на сервере.
     */
    readonly SPID: number;
    /**
     * Предоставляет доступ к информации о системе, находящейся в базе данных, с которой устанавливается соединение.
     */
    readonly SystemInfo: ISystemInfo;
    /**
     * Возвращает значение счетчика вложенных транзакций.
     */
    readonly TranCount: number;
    /**
     * Свойство возвращает имя пользователя базы данных, от имени которого устанавливается соединение.
     */
    readonly UserName: string;
    /**
     * Свойство возвращает статус пользователя.
     */
    readonly UserType: TUserType;

    /**
     * Метод разрывает соединение с базой данных.
     * Равносильно выполнению Active со значением False.
     * Для открытия соединения следует использовать метод Open или установить свойство Active равным True.
     */
    Close(): void;
    /**
     * Метод сохраняет изменения, сделанные в базе данных в рамках активной транзакции и заканчивает транзакцию.
     */
    CommitTransaction(): void;
    /**
     * Метод устанавливает соединение с базой данных.
     * Равносильно выполнению Active со значением True.
     * Чтобы закрыть соединение, нужно использовать метод Close или установить свойство Active равным False.
     */
    Open(): void;
    /**
     * Метод отменяет изменения, сделанные в базе данных в рамках активной транзакции и заканчивает транзакцию.
     * После вызова RollbackTransaction счетчик транзакций TranCount сбрасывается в ноль.
     */
    RollbackTransaction(): void;
    /**
     * Метод начинает транзакцию.
     * Если во время вызова метода уже есть активная транзакция,
     * то произойдет только увеличение счетчика транзакций TranCount на 1.
     */
    StartTransaction(): void;
    /**
     * Метод возвращает для текущего пользователя объект привилегии по ее имени.
     *
     * @param privilegeName наименование привилегии
     */
    UserPrivilege(privilegeName: string): IPrivilege;
}